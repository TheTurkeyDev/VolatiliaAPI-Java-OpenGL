#version 330

in vec2 pass_textureCoordinates;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColor;
uniform float shineDampen;
uniform float reflection;
uniform vec3 skyColor;

void main(void)
{
	vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitLightVector = normalize(toLightVector);
	
	float dotResult = dot(unitNormal, unitLightVector);
	float brightness = max(dotResult, 0.15);
	vec3 diffuse = brightness * lightColor;
	
	vec3 unitVectorToCamera = normalize(toCameraVector);
	vec3 reflectedLightVector = reflect(-unitLightVector, unitNormal);
	
	float specularDot = dot(reflectedLightVector, unitVectorToCamera);
	specularDot = max(specularDot, 0.0);
	float dampenedFactor = pow(specularDot, shineDampen);
	vec3 finalSpecular = dampenedFactor * reflection * lightColor;
	
	vec4 textureColor = texture(textureSampler, pass_textureCoordinates);
	
	if(textureColor.a < 0.5)
	{
		discard;
	}
	
	out_Color = vec4(diffuse, 1.0) * textureColor + vec4(finalSpecular, 1.0);
	out_Color = mix(vec4(skyColor, 1.0), out_Color, visibility);
}